package handlers

import (
	"fmt"
	"net/http"
	"os"
	"path/filepath"

	"github.com/gin-gonic/gin"
)

// DownloadFile godoc
// @Summary Download a generated file
// @Description Download a file generated by the validation process
// @Tags files
// @Produce octet-stream
// @Param filename path string true "File name"
// @Success 200 {file} file
// @Failure 404 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /download/{filename} [get]
func DownloadFile(c *gin.Context) {
	filename := c.Param("filename")
	
	// Validate filename to prevent directory traversal
	if filepath.Base(filename) != filename {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid filename"})
		return
	}
	
	filePath := filepath.Join("./temp", filename)
	
	// Check if file exists
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		c.JSON(http.StatusNotFound, gin.H{"error": "File not found"})
		return
	}
	
	// Set appropriate content type based on file extension
	ext := filepath.Ext(filename)
	contentType := "application/octet-stream"
	
	switch ext {
	case ".csv":
		contentType = "text/csv"
	case ".xlsx", ".xls":
		contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
	}
	
	c.Header("Content-Description", "File Transfer")
	c.Header("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
	c.Header("Content-Type", contentType)
	
	c.File(filePath)
}
